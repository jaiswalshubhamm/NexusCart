"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isSellerOrAdmin = exports.isSeller = exports.isAdmin = exports.isAuth = exports.generateToken = void 0;

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var generateToken = function generateToken(user) {
  return _jsonwebtoken["default"].sign({
    id: user.id,
    name: user.name,
    email: user.email,
    isAdmin: user.isAdmin // isSeller: user.isSeller,

  }, process.env.JWT_SECRET || 'somethingsecret', {
    expiresIn: '30d'
  });
};

exports.generateToken = generateToken;

var isAuth = function isAuth(req, res, next) {
  var authorization = req.headers.authorization;

  if (authorization) {
    var token = authorization.slice(7, authorization.length);

    _jsonwebtoken["default"].verify(token, process.env.JWT_SECRET || 'somethingsecret', function (err, decode) {
      if (err) {
        res.status(401).send({
          message: 'Invalid Token'
        });
      } else {
        req.user = decode;
        next();
      }
    });
  } else {
    res.status(401).send({
      message: 'No Token'
    });
  }
};

exports.isAuth = isAuth;

var isAdmin = function isAdmin(req, res, next) {
  if (req.user && req.user.isAdmin) {
    next();
  } else {
    res.status(401).send({
      message: 'Invalid Admin Token'
    });
  }
};

exports.isAdmin = isAdmin;

var isSeller = function isSeller(req, res, next) {
  if (req.user && req.user.isSeller) {
    next();
  } else {
    res.status(401).send({
      message: 'Invalid Seller Token'
    });
  }
};

exports.isSeller = isSeller;

var isSellerOrAdmin = function isSellerOrAdmin(req, res, next) {
  if (req.user && (req.user.isSeller || req.user.isAdmin)) {
    next();
  } else {
    res.status(401).send({
      message: 'Invalid Admin/Seller Token'
    });
  }
};

exports.isSellerOrAdmin = isSellerOrAdmin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJnZW5lcmF0ZVRva2VuIiwidXNlciIsImp3dCIsInNpZ24iLCJpZCIsIm5hbWUiLCJlbWFpbCIsImlzQWRtaW4iLCJwcm9jZXNzIiwiZW52IiwiSldUX1NFQ1JFVCIsImV4cGlyZXNJbiIsImlzQXV0aCIsInJlcSIsInJlcyIsIm5leHQiLCJhdXRob3JpemF0aW9uIiwiaGVhZGVycyIsInRva2VuIiwic2xpY2UiLCJsZW5ndGgiLCJ2ZXJpZnkiLCJlcnIiLCJkZWNvZGUiLCJzdGF0dXMiLCJzZW5kIiwibWVzc2FnZSIsImlzU2VsbGVyIiwiaXNTZWxsZXJPckFkbWluIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFTyxJQUFNQSxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQUNDLElBQUQsRUFBVTtBQUNuQyxTQUFPQyx5QkFBSUMsSUFBSixDQUNIO0FBQ0lDLElBQUFBLEVBQUUsRUFBRUgsSUFBSSxDQUFDRyxFQURiO0FBRUlDLElBQUFBLElBQUksRUFBRUosSUFBSSxDQUFDSSxJQUZmO0FBR0lDLElBQUFBLEtBQUssRUFBRUwsSUFBSSxDQUFDSyxLQUhoQjtBQUlJQyxJQUFBQSxPQUFPLEVBQUVOLElBQUksQ0FBQ00sT0FKbEIsQ0FLSTs7QUFMSixHQURHLEVBUUhDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxVQUFaLElBQTBCLGlCQVJ2QixFQVNIO0FBQ0lDLElBQUFBLFNBQVMsRUFBRTtBQURmLEdBVEcsQ0FBUDtBQWFILENBZE07Ozs7QUFnQkEsSUFBTUMsTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsRUFBb0I7QUFDdEMsTUFBTUMsYUFBYSxHQUFHSCxHQUFHLENBQUNJLE9BQUosQ0FBWUQsYUFBbEM7O0FBQ0EsTUFBSUEsYUFBSixFQUFtQjtBQUNmLFFBQU1FLEtBQUssR0FBR0YsYUFBYSxDQUFDRyxLQUFkLENBQW9CLENBQXBCLEVBQXVCSCxhQUFhLENBQUNJLE1BQXJDLENBQWQ7O0FBQ0FsQiw2QkFBSW1CLE1BQUosQ0FDSUgsS0FESixFQUVJVixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsVUFBWixJQUEwQixpQkFGOUIsRUFHSSxVQUFDWSxHQUFELEVBQU1DLE1BQU4sRUFBaUI7QUFDYixVQUFJRCxHQUFKLEVBQVM7QUFDTFIsUUFBQUEsR0FBRyxDQUFDVSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFBRUMsVUFBQUEsT0FBTyxFQUFFO0FBQVgsU0FBckI7QUFDSCxPQUZELE1BRU87QUFDSGIsUUFBQUEsR0FBRyxDQUFDWixJQUFKLEdBQVdzQixNQUFYO0FBQ0FSLFFBQUFBLElBQUk7QUFDUDtBQUNKLEtBVkw7QUFZSCxHQWRELE1BY087QUFDSEQsSUFBQUEsR0FBRyxDQUFDVSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFBRUMsTUFBQUEsT0FBTyxFQUFFO0FBQVgsS0FBckI7QUFDSDtBQUNKLENBbkJNOzs7O0FBcUJBLElBQU1uQixPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFDTSxHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxFQUFvQjtBQUN2QyxNQUFJRixHQUFHLENBQUNaLElBQUosSUFBWVksR0FBRyxDQUFDWixJQUFKLENBQVNNLE9BQXpCLEVBQWtDO0FBQzlCUSxJQUFBQSxJQUFJO0FBQ1AsR0FGRCxNQUVPO0FBQ0hELElBQUFBLEdBQUcsQ0FBQ1UsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLE1BQUFBLE9BQU8sRUFBRTtBQUFYLEtBQXJCO0FBQ0g7QUFDSixDQU5NOzs7O0FBUUEsSUFBTUMsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ2QsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsRUFBb0I7QUFDeEMsTUFBSUYsR0FBRyxDQUFDWixJQUFKLElBQVlZLEdBQUcsQ0FBQ1osSUFBSixDQUFTMEIsUUFBekIsRUFBbUM7QUFDL0JaLElBQUFBLElBQUk7QUFDUCxHQUZELE1BRU87QUFDSEQsSUFBQUEsR0FBRyxDQUFDVSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFBRUMsTUFBQUEsT0FBTyxFQUFFO0FBQVgsS0FBckI7QUFDSDtBQUNKLENBTk07Ozs7QUFRQSxJQUFNRSxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQUNmLEdBQUQsRUFBTUMsR0FBTixFQUFXQyxJQUFYLEVBQW9CO0FBQy9DLE1BQUlGLEdBQUcsQ0FBQ1osSUFBSixLQUFhWSxHQUFHLENBQUNaLElBQUosQ0FBUzBCLFFBQVQsSUFBcUJkLEdBQUcsQ0FBQ1osSUFBSixDQUFTTSxPQUEzQyxDQUFKLEVBQXlEO0FBQ3JEUSxJQUFBQSxJQUFJO0FBQ1AsR0FGRCxNQUVPO0FBQ0hELElBQUFBLEdBQUcsQ0FBQ1UsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLE1BQUFBLE9BQU8sRUFBRTtBQUFYLEtBQXJCO0FBQ0g7QUFDSixDQU5NIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nO1xyXG5cclxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlVG9rZW4gPSAodXNlcikgPT4ge1xyXG4gICAgcmV0dXJuIGp3dC5zaWduKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IHVzZXIuaWQsXHJcbiAgICAgICAgICAgIG5hbWU6IHVzZXIubmFtZSxcclxuICAgICAgICAgICAgZW1haWw6IHVzZXIuZW1haWwsXHJcbiAgICAgICAgICAgIGlzQWRtaW46IHVzZXIuaXNBZG1pblxyXG4gICAgICAgICAgICAvLyBpc1NlbGxlcjogdXNlci5pc1NlbGxlcixcclxuICAgICAgICB9LFxyXG4gICAgICAgIHByb2Nlc3MuZW52LkpXVF9TRUNSRVQgfHwgJ3NvbWV0aGluZ3NlY3JldCcsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBleHBpcmVzSW46ICczMGQnLFxyXG4gICAgICAgIH1cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaXNBdXRoID0gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgICBjb25zdCBhdXRob3JpemF0aW9uID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbjtcclxuICAgIGlmIChhdXRob3JpemF0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgdG9rZW4gPSBhdXRob3JpemF0aW9uLnNsaWNlKDcsIGF1dGhvcml6YXRpb24ubGVuZ3RoKTtcclxuICAgICAgICBqd3QudmVyaWZ5KFxyXG4gICAgICAgICAgICB0b2tlbixcclxuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCB8fCAnc29tZXRoaW5nc2VjcmV0JyxcclxuICAgICAgICAgICAgKGVyciwgZGVjb2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDEpLnNlbmQoeyBtZXNzYWdlOiAnSW52YWxpZCBUb2tlbicgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcS51c2VyID0gZGVjb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNDAxKS5zZW5kKHsgbWVzc2FnZTogJ05vIFRva2VuJyB9KTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBpc0FkbWluID0gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgICBpZiAocmVxLnVzZXIgJiYgcmVxLnVzZXIuaXNBZG1pbikge1xyXG4gICAgICAgIG5leHQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDEpLnNlbmQoeyBtZXNzYWdlOiAnSW52YWxpZCBBZG1pbiBUb2tlbicgfSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaXNTZWxsZXIgPSAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICAgIGlmIChyZXEudXNlciAmJiByZXEudXNlci5pc1NlbGxlcikge1xyXG4gICAgICAgIG5leHQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDEpLnNlbmQoeyBtZXNzYWdlOiAnSW52YWxpZCBTZWxsZXIgVG9rZW4nIH0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGlzU2VsbGVyT3JBZG1pbiA9IChyZXEsIHJlcywgbmV4dCkgPT4ge1xyXG4gICAgaWYgKHJlcS51c2VyICYmIChyZXEudXNlci5pc1NlbGxlciB8fCByZXEudXNlci5pc0FkbWluKSkge1xyXG4gICAgICAgIG5leHQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyg0MDEpLnNlbmQoeyBtZXNzYWdlOiAnSW52YWxpZCBBZG1pbi9TZWxsZXIgVG9rZW4nIH0pO1xyXG4gICAgfVxyXG59OyJdfQ==
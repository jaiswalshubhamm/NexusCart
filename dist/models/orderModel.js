'use strict';

module.exports = function (sequelize, DataTypes) {
  var Order = sequelize.define('Order', {
    userId: DataTypes.INTEGER,
    itemsPrice: DataTypes.FLOAT,
    shippingPrice: DataTypes.FLOAT,
    taxPrice: DataTypes.FLOAT,
    totalPrice: DataTypes.FLOAT,
    paymentMethod: DataTypes.STRING,
    paymentId: DataTypes.STRING,
    paymentStatus: DataTypes.STRING,
    paymentUpdateTime: DataTypes.STRING,
    paymentEmail: DataTypes.STRING,
    shippingName: DataTypes.STRING,
    shippingAddress: DataTypes.STRING,
    shippingCity: DataTypes.STRING,
    shippingPostalCode: DataTypes.STRING,
    shippingCountry: DataTypes.STRING,
    shippingLat: DataTypes.FLOAT,
    shippingLong: DataTypes.FLOAT,
    isPaid: DataTypes.BOOLEAN,
    paidAt: DataTypes.DATE,
    isDelivered: DataTypes.BOOLEAN,
    deliveredAt: DataTypes.DATE
  }, {});

  Order.associate = function (models) {
    // associations can be defined here
    models.Order.belongsTo(models.User, {
      as: 'user',
      foreignKey: 'userId'
    });
    models.Order.hasMany(models.OrderItem, {
      as: 'orderItems',
      foreignKey: 'orderId'
    });
  };

  return Order;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvb3JkZXJNb2RlbC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2VxdWVsaXplIiwiRGF0YVR5cGVzIiwiT3JkZXIiLCJkZWZpbmUiLCJ1c2VySWQiLCJJTlRFR0VSIiwiaXRlbXNQcmljZSIsIkZMT0FUIiwic2hpcHBpbmdQcmljZSIsInRheFByaWNlIiwidG90YWxQcmljZSIsInBheW1lbnRNZXRob2QiLCJTVFJJTkciLCJwYXltZW50SWQiLCJwYXltZW50U3RhdHVzIiwicGF5bWVudFVwZGF0ZVRpbWUiLCJwYXltZW50RW1haWwiLCJzaGlwcGluZ05hbWUiLCJzaGlwcGluZ0FkZHJlc3MiLCJzaGlwcGluZ0NpdHkiLCJzaGlwcGluZ1Bvc3RhbENvZGUiLCJzaGlwcGluZ0NvdW50cnkiLCJzaGlwcGluZ0xhdCIsInNoaXBwaW5nTG9uZyIsImlzUGFpZCIsIkJPT0xFQU4iLCJwYWlkQXQiLCJEQVRFIiwiaXNEZWxpdmVyZWQiLCJkZWxpdmVyZWRBdCIsImFzc29jaWF0ZSIsIm1vZGVscyIsImJlbG9uZ3NUbyIsIlVzZXIiLCJhcyIsImZvcmVpZ25LZXkiLCJoYXNNYW55IiwiT3JkZXJJdGVtIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQUNDLFNBQUQsRUFBWUMsU0FBWixFQUEwQjtBQUN6QyxNQUFNQyxLQUFLLEdBQUdGLFNBQVMsQ0FBQ0csTUFBVixDQUFpQixPQUFqQixFQUEwQjtBQUN0Q0MsSUFBQUEsTUFBTSxFQUFFSCxTQUFTLENBQUNJLE9BRG9CO0FBRXRDQyxJQUFBQSxVQUFVLEVBQUVMLFNBQVMsQ0FBQ00sS0FGZ0I7QUFHdENDLElBQUFBLGFBQWEsRUFBRVAsU0FBUyxDQUFDTSxLQUhhO0FBSXRDRSxJQUFBQSxRQUFRLEVBQUVSLFNBQVMsQ0FBQ00sS0FKa0I7QUFLdENHLElBQUFBLFVBQVUsRUFBRVQsU0FBUyxDQUFDTSxLQUxnQjtBQU10Q0ksSUFBQUEsYUFBYSxFQUFFVixTQUFTLENBQUNXLE1BTmE7QUFPdENDLElBQUFBLFNBQVMsRUFBRVosU0FBUyxDQUFDVyxNQVBpQjtBQVF0Q0UsSUFBQUEsYUFBYSxFQUFFYixTQUFTLENBQUNXLE1BUmE7QUFTdENHLElBQUFBLGlCQUFpQixFQUFFZCxTQUFTLENBQUNXLE1BVFM7QUFVdENJLElBQUFBLFlBQVksRUFBRWYsU0FBUyxDQUFDVyxNQVZjO0FBV3RDSyxJQUFBQSxZQUFZLEVBQUVoQixTQUFTLENBQUNXLE1BWGM7QUFZdENNLElBQUFBLGVBQWUsRUFBRWpCLFNBQVMsQ0FBQ1csTUFaVztBQWF0Q08sSUFBQUEsWUFBWSxFQUFFbEIsU0FBUyxDQUFDVyxNQWJjO0FBY3RDUSxJQUFBQSxrQkFBa0IsRUFBRW5CLFNBQVMsQ0FBQ1csTUFkUTtBQWV0Q1MsSUFBQUEsZUFBZSxFQUFFcEIsU0FBUyxDQUFDVyxNQWZXO0FBZ0J0Q1UsSUFBQUEsV0FBVyxFQUFFckIsU0FBUyxDQUFDTSxLQWhCZTtBQWlCdENnQixJQUFBQSxZQUFZLEVBQUV0QixTQUFTLENBQUNNLEtBakJjO0FBa0J0Q2lCLElBQUFBLE1BQU0sRUFBRXZCLFNBQVMsQ0FBQ3dCLE9BbEJvQjtBQW1CdENDLElBQUFBLE1BQU0sRUFBRXpCLFNBQVMsQ0FBQzBCLElBbkJvQjtBQW9CdENDLElBQUFBLFdBQVcsRUFBRTNCLFNBQVMsQ0FBQ3dCLE9BcEJlO0FBcUJ0Q0ksSUFBQUEsV0FBVyxFQUFFNUIsU0FBUyxDQUFDMEI7QUFyQmUsR0FBMUIsRUFzQlgsRUF0QlcsQ0FBZDs7QUF1QkF6QixFQUFBQSxLQUFLLENBQUM0QixTQUFOLEdBQWtCLFVBQVVDLE1BQVYsRUFBa0I7QUFDbEM7QUFDQUEsSUFBQUEsTUFBTSxDQUFDN0IsS0FBUCxDQUFhOEIsU0FBYixDQUF1QkQsTUFBTSxDQUFDRSxJQUE5QixFQUFvQztBQUFFQyxNQUFBQSxFQUFFLEVBQUUsTUFBTjtBQUFjQyxNQUFBQSxVQUFVLEVBQUU7QUFBMUIsS0FBcEM7QUFDQUosSUFBQUEsTUFBTSxDQUFDN0IsS0FBUCxDQUFha0MsT0FBYixDQUFxQkwsTUFBTSxDQUFDTSxTQUE1QixFQUF1QztBQUFFSCxNQUFBQSxFQUFFLEVBQUUsWUFBTjtBQUFvQkMsTUFBQUEsVUFBVSxFQUFFO0FBQWhDLEtBQXZDO0FBQ0QsR0FKRDs7QUFLQSxTQUFPakMsS0FBUDtBQUNELENBOUJEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSAoc2VxdWVsaXplLCBEYXRhVHlwZXMpID0+IHtcbiAgY29uc3QgT3JkZXIgPSBzZXF1ZWxpemUuZGVmaW5lKCdPcmRlcicsIHtcbiAgICB1c2VySWQ6IERhdGFUeXBlcy5JTlRFR0VSLFxuICAgIGl0ZW1zUHJpY2U6IERhdGFUeXBlcy5GTE9BVCxcbiAgICBzaGlwcGluZ1ByaWNlOiBEYXRhVHlwZXMuRkxPQVQsXG4gICAgdGF4UHJpY2U6IERhdGFUeXBlcy5GTE9BVCxcbiAgICB0b3RhbFByaWNlOiBEYXRhVHlwZXMuRkxPQVQsXG4gICAgcGF5bWVudE1ldGhvZDogRGF0YVR5cGVzLlNUUklORyxcbiAgICBwYXltZW50SWQ6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgcGF5bWVudFN0YXR1czogRGF0YVR5cGVzLlNUUklORyxcbiAgICBwYXltZW50VXBkYXRlVGltZTogRGF0YVR5cGVzLlNUUklORyxcbiAgICBwYXltZW50RW1haWw6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgc2hpcHBpbmdOYW1lOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIHNoaXBwaW5nQWRkcmVzczogRGF0YVR5cGVzLlNUUklORyxcbiAgICBzaGlwcGluZ0NpdHk6IERhdGFUeXBlcy5TVFJJTkcsXG4gICAgc2hpcHBpbmdQb3N0YWxDb2RlOiBEYXRhVHlwZXMuU1RSSU5HLFxuICAgIHNoaXBwaW5nQ291bnRyeTogRGF0YVR5cGVzLlNUUklORyxcbiAgICBzaGlwcGluZ0xhdDogRGF0YVR5cGVzLkZMT0FULFxuICAgIHNoaXBwaW5nTG9uZzogRGF0YVR5cGVzLkZMT0FULFxuICAgIGlzUGFpZDogRGF0YVR5cGVzLkJPT0xFQU4sXG4gICAgcGFpZEF0OiBEYXRhVHlwZXMuREFURSxcbiAgICBpc0RlbGl2ZXJlZDogRGF0YVR5cGVzLkJPT0xFQU4sXG4gICAgZGVsaXZlcmVkQXQ6IERhdGFUeXBlcy5EQVRFLFxuICB9LCB7fSk7XG4gIE9yZGVyLmFzc29jaWF0ZSA9IGZ1bmN0aW9uIChtb2RlbHMpIHtcbiAgICAvLyBhc3NvY2lhdGlvbnMgY2FuIGJlIGRlZmluZWQgaGVyZVxuICAgIG1vZGVscy5PcmRlci5iZWxvbmdzVG8obW9kZWxzLlVzZXIsIHsgYXM6ICd1c2VyJywgZm9yZWlnbktleTogJ3VzZXJJZCcgfSk7XG4gICAgbW9kZWxzLk9yZGVyLmhhc01hbnkobW9kZWxzLk9yZGVySXRlbSwgeyBhczogJ29yZGVySXRlbXMnLCBmb3JlaWduS2V5OiAnb3JkZXJJZCcgfSk7XG4gIH07XG4gIHJldHVybiBPcmRlcjtcbn07Il19